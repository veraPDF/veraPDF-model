package org.verapdf.model.xmplayer;

import org.verapdf.model.baselayer.Object;
import java.util.List;

% Parent type for all XMP objects
type XMPObject extends Object {
}

% XMP package
type XMPPackage extends XMPObject {

    % collection of all XMP properties
    link Properties: XMPProperty*;

    % collection of all containers of the extension schemas defined in XMP package
    link ExtensionSchemasContainers: ExtensionSchemasContainer*;

    % true if package serialization is valid:
    % - package starts with one of the expected byte arrays representing package beginning in a supported encoding
    % - package represents a well-formed XML that is serialized using the encoding of the matched byte array
    property isSerializationValid: Boolean;

    % the actual encoding used for XMP package serialization
    % it is different from the encoding property, which is declared encoding (deprecated)
    property actualEncoding: String;

    % true if this is well formed XMP package:
    % - package conforms to the requirements of RDF schema
    % - package conforms to the additional requirements imposed by XMP specification on RDF format
    % property isWellFormedXMP: Boolean;

    % true if at least one XMP property is used more than once on the packet
    % property hasDuplicatedProperty: Boolean;

    % value of ‘id’ property of the ‘xpacket’ preprocessing instruction
    % property xpacketid: String;

    % true if all ‘Description’ child nodes of ‘RDF’ node have ‘about’ attribute with the same value
    % property isAboutValid: Boolean;

    % value of ‘bytes’ attribute of XMP package header (null if the attribute is missing)
    property bytes: String;

    % value of ‘encoding’ attribute of XMP package header (null if the attribute is missing)
    property encoding: String;
}

% Main XMP package
% This object is not used for validating correspondence between document info
% dictionary entries and XMP properties - this is validated in CosDocument object
type MainXMPPackage extends XMPPackage {

    % object representing PDF/A identification (set of properties from PDF/A Identification schema) of the document
    link Identification: PDFAIdentification;

    % object representing PDF/UA identification (set of properties from PDF/UA Identification schema) of the document
    link UAIdentification: PDFUAIdentification;

    % value of dc:title
    property dc_title: String;
}

% XMP property
type XMPProperty extends XMPObject {

    % true if this property is predefined (available in predefined schema) for PDF/A-1
    property isPredefinedInXMP2004: Boolean;

    % true if this property is predefined (available in predefined schema) for PDF/A-2 or for PDF/A-3
    property isPredefinedInXMP2005: Boolean;

    % true if this property defined in extension schema in current XMP package
    property isDefinedInCurrentPackage: Boolean;

    % true if this property defined in extension schema in main XMP package
    property isDefinedInMainPackage: Boolean;

    % true if the property value type corresponds to the type defined by XMP specification or extension schema
    property isValueTypeCorrect: Boolean;

}

% XMPMM History property
type XMPMMHistoryProperty extends XMPProperty {
    % Resource Events from xmpMM History property
    link ResourceEvents: XMPMMHistoryResourceEvent+;
}

% Language Alternative property
type XMPLangAlt extends XMPProperty {
     % true if the Language alternative array has only a default value with an undefined language (x-default)
     property xDefault: Boolean;
}

% Resource Event structures of xmpMM History property
type XMPMMHistoryResourceEvent extends XMPObject {
    % action value from Resource Event structure
    property action: String;

    % parameters value from Resource Event structure
    property parameters: String;

    % when value from Resource Event structure
    property when: String;
}

type PDFAIdentification extends XMPObject {

    % value of ‘part’ property from PDF/A Identification schema
    property part: Integer;

    % value of ‘conformance’ property from PDF/A Identification schema
    property conformance: String;

    % namespace prefix for the ‘part’ property from PDF/A Identification schema
    property partPrefix: String;

    % namespace prefix for the ‘conformance’ property from PDF/A Identification schema
    property conformancePrefix: String;

    % namespace prefix for the ‘amd’ property from PDF/A Identification schema
    property amdPrefix: String;

    % namespace prefix for the ‘corr’ property from PDF/A Identification schema
    property corrPrefix: String;

}

type PDFUAIdentification extends XMPObject {

    % value of ‘part’ property from PDF/UA Identification schema
    property part: Integer;

}

% Parent type for all extension schema definition objects
type ExtensionSchemaObject extends XMPObject {

	% true if the object contain not defined fields
    property containsUndefinedFields: Boolean;

}

% Container of the extension schemas defined in XMP package
type ExtensionSchemasContainer extends XMPObject {

    % collection of the extension schema definitions
    link ExtensionSchemaDefinitions: ExtensionSchemaDefinition*;

    % namespace prefix for the container
    property prefix: String;

    % true if extension schema container is of type Bag
    property isValidBag: Boolean;
}

% Extension schema definition from the XMP package
type ExtensionSchemaDefinition extends ExtensionSchemaObject {

    % collection of XMP properties defined in the extension schema
    link ExtensionSchemaProperties: ExtensionSchemaProperty*;

    % collection of XMP value types defined in the extension schema
    link ExtensionSchemaValueTypes: ExtensionSchemaValueType*;

    % true if extension schema namespace URI (’pdfaSchema:namespaceURI’ property) is of type URI
    property isNamespaceURIValidURI: Boolean;

    % true if extension schema preferred prefix (’pdfaSchema:prefix’ property) is of type Text
    property isPrefixValidText: Boolean;

    % true if extension schema properties list (’pdfaSchema:property’ property) is of type Seq
    property isPropertyValidSeq: Boolean;

    % true if extension schema description (’pdfaSchema:schema’ property) is of type Text
    property isSchemaValidText: Boolean;

    % true if extension schema value types list (’pdfaSchema:valueType’ property) is of type Seq
    property isValueTypeValidSeq: Boolean;

    % namespace prefix for the extension schema namespace URI property
    property namespaceURIPrefix: String;

    % namespace prefix for the extension schema prefix property
    property prefixPrefix: String;

    % namespace prefix for the extension schema properties list property
    property propertyPrefix: String;

    % namespace prefix for the extension schema schema description property
    property schemaPrefix: String;

    % namespace prefix for the extension schema value type list property
    property valueTypePrefix: String;
}

% Extension schema property definition
type ExtensionSchemaProperty extends ExtensionSchemaObject {

	% category field value
	property category: String;

    % true if property category (’pdfaProperty:category’ property) is of type Text
    property isCategoryValidText: Boolean;

    % true if property description (’pdfaProperty:description’ property) is of type Text
    property isDescriptionValidText: Boolean;

    % true if property name (’pdfaProperty:name’ property) is of type Text
    property isNameValidText: Boolean;

    % true if property value type (’pdfaProperty:valueType’ property) is of type Text
    property isValueTypeValidText: Boolean;

    % true if property value type (’pdfaProperty:valueType’ property) is defined
    property isValueTypeDefined: Boolean;

    % namespace prefix for the category property
    property categoryPrefix: String;

    % namespace prefix for the description property
    property descriptionPrefix: String;

    % namespace prefix for the name property
    property namePrefix: String;

    % namespace prefix for the value type property
    property valueTypePrefix: String;
}

% Extension schema value type definition
type ExtensionSchemaValueType extends ExtensionSchemaObject {

    % collection of fields used in the type definition
    link ExtensionSchemaFields: ExtensionSchemaField*;

    % true if type description (’pdfaType:description’ property) is of type Text
    property isDescriptionValidText: Boolean;

    % true if type fields list (’pdfaType:field’ property) is of type Seq
    property isFieldValidSeq: Boolean;

    % true if type namespace URI (’pdfaType:namespaceURI’ property) is of type URI
    property isNamespaceURIValidURI: Boolean;

    % true if type preferred prefix (’pdfaType:prefix’ property) is of type Text
    property isPrefixValidText: Boolean;

    % true if type name (’pdfaType:type’ property) is of type Text
    property isTypeValidText: Boolean;

    % namespace prefix for the description type
    property descriptionPrefix: String;

    % namespace prefix for the fields list type
    property fieldPrefix: String;

    % namespace prefix for the namespace URI type
    property namespaceURIPrefix: String;

    % namespace prefix for the prefix type
    property prefixPrefix: String;

    % namespace prefix for the type type
    property typePrefix: String;
}

% Extension schema field definition
type ExtensionSchemaField extends ExtensionSchemaObject {

    % true if field description (’pdfaField:description’ property) is of type Text
    property isDescriptionValidText: Boolean;

    % true if field name (’pdfaField:name’ property) is of type Text
    property isNameValidText: Boolean;

    % true if field value type (’pdfaField:valueType’ property) is of type Text
    property isValueTypeValidText: Boolean;

    % true if field value type (’pdfaField:valueType’ property) is defined
    property isValueTypeDefined: Boolean;

    % namespace prefix for the description field
    property descriptionPrefix: String;

    % namespace prefix for the name field
    property namePrefix: String;

    % namespace prefix for the value type field
    property valueTypePrefix: String;
}