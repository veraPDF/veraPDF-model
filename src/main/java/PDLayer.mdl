package org.verapdf.model.pdlayer;

import org.verapdf.model.baselayer.Object;

import org.verapdf.model.coslayer.CosObject;
import org.verapdf.model.coslayer.CosDict;
import org.verapdf.model.coslayer.CosStream;
import org.verapdf.model.coslayer.CosReal;
import org.verapdf.model.coslayer.CosRenderingIntent;
import org.verapdf.model.coslayer.CosUnicodeName;
import org.verapdf.model.coslayer.CosBBox;

import org.verapdf.model.operator.Operator;

import org.verapdf.model.external.ICCOutputProfile;
import org.verapdf.model.external.ICCInputProfile;
import org.verapdf.model.external.FontProgram;
import org.verapdf.model.external.CMapFile;
import org.verapdf.model.external.JPEG2000;

import org.verapdf.model.xmplayer.XMPPackage;


% base class for all PD layer objects	
type PDObject extends Object {
	
}

% the class corresponding to the high level PDF document structure 
type PDDocument extends PDObject {
	% the array of output intents of the document
	link outputIntents: PDOutputIntent*;
	% the collection of all document pages
	link pages: PDPage+;
	% document level metadata
	link metadata: PDMetadata?;
	% Interactive Form Dictionary (AcroForm entry in the Catalog)
	link AcroForm: PDAcroForm?;
	% additional actions defined for the document (AA entry in the Catalog)
	link AA: PDAction*;
	% document open action (OpenAction entry in the Catalog)
	link OpenAction: PDAction?;
	% document outlines (Outlines entry in the Catalog)
	link Outlines: PDOutline*;
	% the link to the document structure tree root dictionary
	link StructTreeRoot: PDStructTreeRoot?;
	% link to the alternate presentations of the document (/AlternatePresentations entry in the document names dictionary)
	link AlternatePresentations: CosDict*;
}

% the object representing PDF page	
type PDPage extends PDObject {
	% all page annotations
	link annots: PDAnnot*;
	% additional actions defined for the page (AA entry)
	link AA: PDAction*;
	% page content stream
	link contentStream: PDContentStream;
	% group attributes dictionary
	link Group: PDGroup?;
	% page media box
	link MediaBox: CosBBox;
	% page crop box
	link CropBox: CosBBox?;
	% page bleed box
	link BleedBox: CosBBox?;
	% page trim box
	link TrimBox: CosBBox?;
	% page art box
	link ArtBox: CosBBox?;
	% link to the presentation steps dictionary
	link PresSteps: CosDict*;
}

% the object representing content stream together with the resource dictionary
type PDContentStream extends PDObject {
	% all operators in the content stream
	link operators: Operator*;
}

% PDF resource object
type PDResource extends PDObject {

}

% Color space object
type PDColorSpace extends PDResource {
	% number of components
	property nrComponents: Integer;
}

% DeviceGray color space
type PDDeviceGray extends PDColorSpace {

}

% DeviceRGB color space
type PDDeviceRGB extends PDColorSpace {

}

% DeviceCMYK color space
type PDDeviceCMYK extends PDColorSpace {

}

% ICCBased color space
type PDICCBased extends PDColorSpace {
	% embedded ICC profile
	link iccProfile: ICCInputProfile;
}

% Lab color space
type PDLab extends PDColorSpace {

}

% CalGray color space
type PDCalGray extends PDColorSpace {

}

% CalRGB color space
type PDCalRGB extends PDColorSpace {

}

% Separation color space
type PDSeparation extends PDColorSpace {
	% alternate color space
	link alternate: PDColorSpace;
	% colorant name
	link colorantName: CosUnicodeName;
	% true if this is the first occurrence the colorant with this name, or if this is the repeating occurrence and
	% it has the same colorant name have the same titTransform and Alternate color space (compared as PDF objects)
	property areTintAndAlternateConsistent: Boolean;
}

% DeviceN color space
type PDDeviceN extends PDColorSpace {
	% alternate color space
	link alternate: PDColorSpace;
	% colorant names
	link colorantNames: CosUnicodeName+;
	% link to all colorants defined in the Colorants entry of the attributes dictionary
	link Colorants: PDSeparation*;
	% true if all colorant names are present as keys in the Colorants dictionary of the DeviceN attributes dictionary
	property areColorantsPresent: Boolean;
}

% Indexed color space
type PDIndexed extends PDColorSpace {
	% base color space
	link base: PDColorSpace;
}

% generic Pattern type
type PDPattern extends PDColorSpace {

}

% tiling Pattern
type PDTilingPattern extends PDPattern {
	% content stream of the pattern
	link contentStream: PDContentStream;
}

% shading Pattern
type PDShadingPattern extends PDPattern {
	% shading object
	link shading: PDShading;
}

% PDF font dictionary
type PDFont extends PDResource {
	% font type (Type entry)
	property Type: String;
	% font subtype (Subtype entry)
	property Subtype: String;
	% base font name (BaseFont entry)
	link BaseFont: CosUnicodeName;
	% true if the font flags in the font descriptor dictionary mark indicate that the font is symbolic (the entry /Flags has bit 3 set to 1 and bit 6 set to 0)
	property isSymbolic: Boolean;
	% embedded font program for Type 1, TrueType or CID Font
	link fontFile: FontProgram?;
}

% One of the simple font types (Type 1, TrueType, Type 3)
type PDSimpleFont extends PDFont {
	% true if the font is one of the 14 standard fonts defined in PDF 1.4 Reference
	property isStandard: Boolean;
	% FirstChar entry; null if LastChar entry is not present or has invalid type
	property FirstChar: Integer;
	% LastChar entry; null if LastChar entry is not present or has invalid type
	property LastChar: Integer;
	% The size of the Widths array; null if the Widths array is not present or has invalid type
	property Widths_size: Integer;
	% String representation of the font encoding: 
	% - null if the /Encoding entry is not present in the font dictionary
	% - if /Encoding entry in the font dictionary if of Name type, then the value of this entry;
	% - if /Encoding entry is a dictionary, which does not contain /Differences array, then the value of /BaseEncoding entry in this dictionary (or null, if /BaseEncoding is also not present)
	% - the string "Custom", of the /Encoding entry is a dictionary containing /Differences key
	property Encoding: String;
}

% TrueType font dictionary
type PDTrueTypeFont extends PDSimpleFont {
	% true if all glyph names in the differences array of the Encoding dictionary are a part of the Adobe Glyph List
	% and the embedded font program contains the Microsoft Unicode (3,1 - Platform ID=3, Encoding ID=1) cmap subtable
	property differencesAreUnicodeCompliant: Boolean;
}

% Type1 font dictionary
type PDType1Font extends PDSimpleFont {
	% the value of the CharSet entry in the font descriptor dictionary
	property CharSet: String;
	% true if the CharSet is present and correctly lists all glyphs present in the embedded font program
	property charSetListsAllGlyphs: Boolean;
}

% Type3 font dictionary
type PDType3Font extends PDSimpleFont {
	% character strings
	link charStrings: PDContentStream*;
}

% CID Font dictionary
type PDCIDFont extends PDFont {
	% string representation of the CIDtoGIDMap entry ("Identity", or "Custom" in case of stream value)
	property CIDToGIDMap: String;
	% link to the stream containing the value of the CIDSet entry in the CID font descriptor dictionary
	link CIDSet: CosStream?;
	% true if the CIDSet is present and correctly lists all glyphs present in the embedded font program
	property cidSetListsAllGlyphs: Boolean;	
}

% Type0 font dictionary
type PDType0Font extends PDFont {
	% true if Registry and Ordering keys of the corresponding CMap and CIDFont are compatible
	property areRegistryOrderingCompatible: Boolean;
	% true if the Supplement key in the CIDFont is greater or equal to the Supplement key in the CMap dictionary
	property isSupplementCompatible: Boolean;
	% link to the descendant CIDFont
	link DescendantFonts: PDCIDFont;
	% font CMap (Encoding entry)
	link Encoding: PDCMap;
	% the name of the CMap
	property cmapName: String;
}

% CMap dictionary or one of the predefined CMap names
type PDCMap extends PDObject {
	% name of the CMap (or the value of one of the predefined CMap's)
	property CMapName: String;
	% link to the embedded CMap file for an non-standard CMap
	link embeddedFile: CMapFile?;
}

% XObject resource
type PDXObject extends PDResource {
	% subtype of the XObject resource (Image, Form, PS)
	property Subtype: String;
	% link to the OPI dictionary (OPI key in the XObject dictionary)
	link OPI: CosDict?;
	% link to the soft mask image (SMask key)
	% according to the PDF Specification this key may be present only in the Image dictionary, 
	% but ISO 19005-1:2005/Cor.2:2011 forbids SMask key for all XObject dictionaries
	link SMask: PDXObject?;
}

% Image XObject
type PDXImage extends PDXObject {
	% image color space
	link imageCS: PDColorSpace;
	% Interpolate key in the image dictionary or the value of the I key in the inline image dictionary
	property Interpolate: Boolean;
	% image alternates (Alternates key in Image dictionary)
	link Alternates: PDXImage*;
	% color rendering intent
	link Intent: CosRenderingIntent?;
	% in case the image stream uses JPX compression, the link to the corresponding JPEG2000 image
	link jpxStream: JPEG2000?;
}

% Inline image object
type PDInlineImage extends PDXImage {
	% The SPACE-separated list of stream filters (abbreviated)
	property F: String;
}

% Form XObject
type PDXForm extends PDXObject {
	% value of the Subtype2 key
	property Subtype2: String;
	% link to the PostScript stream (PS key in PDF 1.0)
	link PS: CosStream?;
	% link to the reference XObject (Ref key in the form XObject dictionary)
	link Ref: CosDict?;
	% form content
	link contentStream: PDContentStream;
	% link to the group attributes dictionary
	link Group: PDGroup?;
}

% Group attributes dictionary
type PDGroup extends PDObject {
	% group subtype (S key)
	property S: String;
	% link to color space
	link colorSpace: PDColorSpace;
}

% ExtGState dictionary
type PDExtGState extends PDResource {
	% String representation of the TR key ("Identity" or "Custom")
	property TR: String;
	% String representation of the TR2 key ("Identity", "Default" or "Custom")
	property TR2: String;
	% Halftone dictionary
	link HT: PDHalftone;
	% Halftone phase
	link HTP: CosObject?;	
	% String representation of the SMask key ("None" or "Custom")
	property SMask: String;
	% blend mode
	property BM: String;
	% fill alpha
	property ca: Decimal;
	% stroke alpha
	property CA: Decimal;
	% the rendering intent
	link RI: CosRenderingIntent?;
	% font size
	link fontSize: CosReal?;
}

type PDHalftone extends PDObject {
	% Halftone type
	property HalftoneType: Integer;
	% Halftone name
	property HalftoneName: String;
}

% Shading resource
type PDShading extends PDResource {
	% shading color space
	link colorSpace: PDColorSpace;
}

% annotation object	
type PDAnnot extends PDObject {
	% annotation subtype
	property Subtype: String;
	% annotation opacity (CA key)
	property CA: Decimal;
	% annotation flags
	property F: Integer;
	% SPACE-separated list of all keys in the annotation's appearance dictionary (AP key)
	property AP: String;
	% the value of the /FT entry (Field type), in case this is the widget annotation representing the form field, or null,  if this entry is not present
	property FT: String;
	% the type of the normal appearance entry (/N key) in the annotation appearance dictionary (/AP key) or null, if the normal appearance is not present
	property N_type: String;
	% normal appearance stream (N key in the appearance dictionary) of the annotation
	link appearance: PDContentStream?;
	% link to the annotation's color
	link C: CosReal*;
	% link to the annotation's interior color
	link IC: CosReal*;
	% link to the action associated with the annotation (A entry)
	link A: PDAction?;
	% link to the additional actions defined for the annotation (AA entry)
	link AA: PDAction*;
	% the width of the annotation computed as an absolute value of the difference of value 1 and value 3 of the Rect entry
	property width: Decimal;
	% the height of the annotation computed as an absolute value of the difference of value 2 and value 4 of the Rect entry
	property height: Decimal;
}

% Interactive form dictionary
type PDAcroForm extends PDObject {
	% NeedAppearances flag
	property NeedAppearances: Boolean;
	% the value of the XFA key
	link XFA: CosObject?;
	% all interactive form fields in the document
	link formFields: PDFormField*;
}

% Interactive form field
type PDFormField extends PDObject {
	% Field type
	property FT: String;
	% link to the additional actions defined in the interactive form field dictionary (AA entry)
	link AA: PDAction*;	
}
	
% the PDF action object
type PDAction extends PDObject {
	% action subtype
	property S: String;
	% next action (Next entry in the action dictionary)
	link Next: PDAction?;
}

% the Named action object
type PDNamedAction extends PDAction {
	% name of the action
	property N: String;
}

% the GoTo action object
type PDGoToAction extends PDAction {
	% link to the destination to jump to
	link D: CosReal*;
}

% the GoToRemote action object
type PDGoToRemoteAction extends PDGoToAction {

}

% the XMP Metadata stream
type PDMetadata extends PDObject {
	% XMPPackage for PDMetadata in CosDict or XMPMainPackage for PDMetadata in PDDocument
	link XMPPackage: XMPPackage;
	% link to the CosStream contains this metadata
	link stream: CosStream;
	% value of the Filter key in the metadata stream dictionary
	property Filter: String;
}

% the output intent dictionary
type PDOutputIntent extends PDObject {
	% string representation of the indirect link to the ICC output profile
	property destOutputProfileIndirect: String;
	% destination output profile
	link destProfile: ICCOutputProfile?;
	% the link to the destination output profile reference dictionary as defined by PDF/X-4p standard (ISO 15930-7:2010, Annex A)
	link DestOutputProfileRef: CosDict?;
}

% the outline (or bookmark) dictionary
type PDOutline extends PDObject {
	% link to the associated action object (A entry in the outline dictionary)
	link A: PDAction?;
}

% the structure tree root dictionary
type PDStructTreeRoot extends PDObject {
	% immediate children of the structure tree root in the structure hierarchy
	link K: PDStructElem*;
}

% the structure element dictionary
type PDStructElem extends PDObject {
	% the value of the Type entry
	property Type: String;
	% immediate child structure tree elements (this does not include integer marked-content identifiers or marked-content reference dictionaries)
	link K: PDStructElem*;
	% structure type
	link S: CosUnicodeName;
}